- post: '"[Settings]`r`nFolder=%THISPATH%settings`r`nRestricted=1" | Out-File -Encoding ASCII "$dir\SettingsFolder.ini"'
- post:
    - New-Item -ItemType Directory -Force -Path "$dir\lib" | Out-Null
    - New-Item -ItemType Directory -Force -Path "$dir\tools" | Out-Null
    - New-Item -ItemType Directory -Force -Path "$dir\config" | Out-Null
    - ''
    - $puttyDir = "$(appdir putty $global)\current"
    - if (Test-Path "$puttyDir\putty.exe") {
    - '    cmd /c mklink /h "$dir\tools\putty.exe" "$puttyDir\putty.exe"'
    - '} else { '
    - '    Write-Output "Error: putty.exe not found";'
    - '}'
    - if (Test-Path "$puttyDir\pageant.exe") {
    - '    cmd /c mklink /h "$dir\tools\pageant.exe" "$puttyDir\pageant.exe"'
    - '} else {'
    - '    Write-Output "Warning: putty''s pageant.exe not found";'
    - '}'
    - if (Test-Path "$puttyDir\plink.exe") {
    - '    cmd /c mklink /h "$dir\tools\plink.exe" "$puttyDir\plink.exe"'
    - '} else {'
    - '    Write-Output "Warning: putty''s plink.exe not found";'
    - '}'
    - ''
    - $winscpDir = "$(appdir winscp $global)\current"
    - if (Test-Path "$winscpDir\WinSCP.exe") {
    - '    cmd /c mklink /j "$dir\tools\WinSCP" "$winscpDir"'
    - '} else {'
    - '    Write-Output "Note: Install WinSCP for File Transfer support";'
    - '}'
    - ''
    - $vcxsrvDir = "$(appdir vcxsrv $global)\current"
    - if (Test-Path "$vcxsrvDir\vcxsrv.exe") {
    - '    cmd /c mklink /j "$dir\tools\VcXsrv" "$vcxsrvDir" '
    - '} else {'
    - '    Write-Output "Note: Install VcXsrv for X-Server support";'
    - '}'
    - ''
    - 'if (!(Test-Path "$dir\config\preferences.xml")) { '
    - '    $preferencesXml = ''<?xml version="1.0" encoding="utf-8"?><Settings><CheckForXServer>False</CheckForXServer><CheckForWinSCP>False</CheckForWinSCP><CheckForPageant>False</CheckForPageant></Settings>'''
    - '    Set-Content -Path "$dir\config\preferences.xml" -Encoding UTF8 -Value $preferencesXml '
    - '}'
    - pre:
    - $conf = 'XMBCSettings.xml'
    - if (!(Test-Path "$persist_dir\$conf")) {
    - "    Write-Host 'File' $conf 'does not exists. Creating.' -f Yellow"
    - '    $cont = "<?xml version=`"1.0`"?>`n<root>`n"'
    - '    $cont += "<CheckVersion Days=`"5`" Enable=`"false`" Beta=`"false`" />`n</root>"'
    - '    Set-Content "$dir\$conf" $cont -Encoding ascii'
    - '}'
- installer:
    - $antLibPath = "$(appsdir $global)\ant\current\lib"
    - Write-Host -fore blue "Copying ivy-$version.jar to $antLibPath"
    - Copy-Item "$dir\ivy-$version.jar" $antLibPath
- post:
    - $installable = $true
    - $user = [Security.Principal.WindowsIdentity]::GetCurrent() -as [Security.Principal.WindowsPrincipal]
    - $permission = Get-Acl $dir | select -ExpandProperty Access | where {
    - '    ($user.IsInRole($_.IdentityReference)) -and `'
    - "    ($_.FileSystemRights.ToString() -eq 'FullControl') -and `"
    - '    # 3 = ([Security.AccessControl.InheritanceFlags]::ContainerInherit -bor ObjectInherit)'
    - '    ($_.InheritanceFlags -band 3) -and `'
    - "    ($_.PropagationFlags.ToString() -ne 'NoPropagateInherit')"
    - '}'
    - if ($null -eq $permission) {
    - '   warn "Full Control access to the scoop directory is necessary to install WSL distribution."'
    - '   warn "Change directory security and reinstall ArchWSL."'
    - '   $installable = $false'
    - '}'
    - if ($null -eq (Get-Command wslconfig -ErrorAction SilentlyContinue)) {
    - '    warn "WSL appears not to be enabled!"'
    - '    warn "Run ''Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux''"'
    - '    warn "from an elevated PowerShell. Restart your computer when prompted and reinstall ArchWSL."'
    - '    $installable = $false'
    - '}'
    - if ($installable) {
    - "    \"`$si = New-Object System.Diagnostics.ProcessStartInfo '$dir\\Arch.exe' -Property @{ UseShellExecute = `$false; RedirectStandardInput = `$true }"
    - '    `$p = [System.Diagnostics.Process]::Start(`$si)'
    - "    `$p.StandardInput.Write('y')"
    - '    `$p.WaitForExit()'
    - "    `$lx_uid = & '$dir\\Arch.exe' get --lxuid"
    - "    if(!`$lx_uid) { error 'ArchWsl is not installed!'; return }"
    - "    Set-ItemProperty -Path ('HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Lxss\\' + `$lx_uid) -Name BasePath -Value '$persist_dir\\data'"
    - "    if (Test-Path ('$persist_dir' + '\\data\\rootfs')) {"
    - "        Remove-Item -Recurse -Path '$dir\\rootfs'"
    - '    } else {'
    - "        Move-Item -Path '$dir\\rootfs' -Destination '$persist_dir\\data\\rootfs'"
    - '    }'
    - "    Remove-Item -Recurse -Path '$dir\\temp'"
    - '    " | Set-Content "$dir\install.ps1"'
    - '    & "$dir\install.ps1"'
    - '}'
- installer:
    - $startup = shortcut_folder $global | Select-Object -ExpandProperty Path | Split-Path -Parent | Join-Path -ChildPath 'Startup'
    - $current = current_dir $dir
    - $cont = @(
    - "    '$wsShell = New-Object -ComObject WScript.Shell'"
    - "    \"`$wsShell = `$wsShell.CreateShortcut('$startup\\BGPKiller.lnk')\""
    - "    \"`$wsShell.TargetPath = '$current\\BGPKiller.exe'\""
    - '    "`$wsShell.WorkingDirectory = ''$current''"'
    - "    '$wsShell.Save()'"
    - '    ''Write-Host "BGPKiller has been added to the startup programs."'''
    - '    ''Write-Host "Run bgpkiller-remove-startup to remove from startup."'''
    - )
    - Set-Content "$dir\bgpkiller-add-startup.ps1" -Value ($cont -join "`r`n") -Encoding Ascii
    - Set-Content "$dir\bgpkiller-remove-startup.ps1" -Value "Remove-Item '$startup\BGPKiller.lnk' -ErrorAction SilentlyContinue -Force" -Encoding Ascii
- pre: if(!(Test-Path "$persist_dir\Setting.xml")) {Set-Content -Encoding ASCII -Path "$dir\Setting.xml" -Value '<?xml version="1.0" encoding="utf-8"?><WebDAVClientSetting xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></WebDAVClientSetting>'}
- installer:
    - Expand-7zipArchive "$dir\chefdk.zip" "$dir"
    - Remove-Item "$dir\chefdk.zip"
- pre:
    - $xml = "$dir\ConEmu\ConEmu.xml"
    - if(!(Test-Path "$xml")) {
    - '    # Disable AutoUpdates'
    - '    $cont = Get-Content "$dir\ConEmu\ConEmu_Sample.xml" -Raw'
    - "    $keys = @('Update.CheckOnStartup', 'Update.CheckHourly')"
    - '    foreach($key in $keys) {'
    - '        $find = "<value name=""$key"" type=""hex"" data=""\d+""/>"'
    - '        $replace = "<value name=""$key"" type=""hex"" data=""00""/>"'
    - '        $cont = $cont -replace $find, $replace'
    - '    }'
    - '    Set-Content $xml $cont -Encoding Ascii -Force'
    - '}'
- pre:
    - If (!(Test-Path "$persist_dir\Convert.exe.xml")) {
    - '   $cfg = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGZpc2hDb252ZXJ0Pgo8L2Zpc2hDb252ZXJ0Pg=="))'
    - '   New-Item "$dir\Convert.exe.xml" -Value $cfg | Out-Null'
    - '}'
- post:
    - '# change appdata settings folder'
    - (Get-Content "$dir\app\Cryptomator.cfg" -Encoding ASCII).replace('~/AppData/Roaming/Cryptomator', '../data') | Set-Content "$dir\app\Cryptomator.cfg" -Encoding ASCII
- pre: if(!(Test-Path "$dir/DiskInfo.ini")) { Add-Content "$dir/DiskInfo.ini" $null }
- pre:
    - if(!(Test-Path "$dir/DiskMark64.ini")) { Add-Content "$dir/DiskMark64.ini" $null }
    - if(!(Test-Path "$dir/DiskMark32.ini")) { Add-Content "$dir/DiskMark32.ini" $null }
- post: Remove-Item "$dir\user_profiles_enabled"
- installer: Remove-Item "$dir\Uninstall*", "$dir\$*", "$dir\vcredist_*.exe" -Recurse
- installer64:
    - Expand-7zipArchive "$dir\`$PLUGINSDIR\app-64.7z" "$dir"
    - Remove-Item "$dir\`$PLUGINSDIR", "$dir\Uninstall*" -Force -Recurse
- pre:
    - if (!(Test-Path "$persist_dir\Ditto.db")) {
    - "    Write-Host 'File Ditto.db does not exists. Creating.' -f Yellow"
    - '    Start-Process -FilePath "$dir\Ditto.exe"'
    - '    while (!(Test-Path "$dir\Ditto.db")) {'
    - '        Start-Sleep -Milliseconds 500'
    - '    }'
    - '    Start-Sleep 1'
    - '    Stop-Process -Name Ditto'
    - '}'
    - $file = 'Ditto.Settings'
    - if (!(Test-Path "$persist_dir\$file")) {
    - "    Write-Host 'File' $file 'does not exists. Creating.' -f Yellow"
    - "    $CONT = @('[Ditto]', 'DBPath3=Ditto.db')"
    - '    Set-Content "$dir\$file" ($CONT -join "`r`n") -Encoding Ascii'
    - '}'
- post:
    - '@"'
    - setup_path="$($dir -replace "\\", "/")"
    - export EASYRSA="`${setup_path}"
    - export EASYRSA_PKI="`${setup_path}/keys/pki"
    - export PATH="`${setup_path};`${setup_path}/bin;`${PATH}"
    - export HOME="`${setup_path}"
    - export ENV="/disable-env"
    - '`${setup_path}/easyrsa $*'
    - '"@ | out-file -en oem $dir\easyrsa-wrapper.sh'
    - if (!(Test-Path -Path "$dir\keys\pki")) { easyrsa init-pki }
- pre:
    - "    # Overwrite SCRIPT because elasticsearch-env.bat doesn't care if SCRIPT or ES_HOME are already set ..."
    - $file = "$dir\bin\elasticsearch-env.bat"
    - $cont = (Get-Content "$file") -replace 'set SCRIPT=%0', "set SCRIPT=$file"
    - Set-Content "$file" ($cont -join "`r`n") -Encoding ASCII
    - '    # use persistent data/logs directory'
    - $file = "$dir\config\elasticsearch.yml"
    - "$cont = (Get-Content \"$file\") -replace '#path.data:.*$', \"path.data: $persist_dir\\data\""
    - "$cont = $cont -replace '#path.logs:.*$', \"path.logs: $persist_dir\\logs\""
    - Set-Content "$file" ($cont -join "`r`n") -Encoding ASCII
- pre:
    - Expand-7zipArchive "$dir\Falcon SQL Client Setup $version.exe" "$dir\tmp"
    - Expand-7zipArchive "$dir\tmp\`$PLUGINSDIR\app-64.7z" "$dir"
    - rm -r "$dir\tmp"
- pre:
    - if (!(Test-Path "$dir/FastCopy2.ini")) {
    - '   Set-Content "$dir/FastCopy2.ini" -value ''[main]'''
    - '}'
    - if (!(Test-Path "$dir/Log")) {
    - '   New-Item "$dir/Log" -type directory -force'
    - '}'
- {}
- pre:
    - if (!(Test-Path "$persist_dir\IDE\prefs_win32.ini")) {
    - "   $fbc = (versiondir 'freebasic' 'current') -replace '\\\\', '\\\\'"
    - "   $pref = (Get-Content \"$dir\\IDE\\prefs_win32.ini\" -Raw) -replace 'fbc.exe', \"$fbc\\\\fbc.exe\""
    - '   Set-Content "$dir\IDE\prefs_win32.ini" $pref -Encoding ASCII'
    - '}'
- pre:
    - $file = 'fzdefaults.xml'
    - if (-not (Test-Path "$persist_dir\$file")) {
    - '    Copy-Item "$dir\docs\fzdefaults.xml.example" "$dir\fzdefaults.xml"'
    - '}'
- installer:
    - Remove-Item "$dir\`$PLUGINSDIR", "$dir\source", "$dir\`$R1", "$dir\Uninstall.exe.nsis" -Recurse
    - if(!(Test-Path "$dir\FileZilla Server.xml")) {Set-Content "$dir\FileZilla Server.xml" $null}
- pre: if(!(Test-Path "$dir\FASMW.INI")) {New-Item ("$dir\FASMW.INI") -Type File | Out-Null}
- installer: cmd /c start /WAIT "$dir\flux-setup.exe" /S /D=$dir
- pre: if(!(Test-Path("$dir\freac.xml"))) { New-Item "$dir\freac.xml" | Out-Null }
- installer:
    - Expand-InnoArchive -Path "$dir\$fname"
    - Expand-InnoArchive -Path "$dir\$fname" -ExtractDir '{code_CefInstallDir}' -Removal
- pre:
    - function ensureFile([String] $name) {
    - '    if (!(Test-Path "$persist_dir\$name") -and !(Test-Path "$dir\$name")) {'
    - '        Add-Content -Path "$dir\$name" -Value $null'
    - '    }'
    - '}'
    - ensureFile 'FSSettings.db'
    - ensureFile 'HisFolderList.db'
- installer:
    - Push-Location "$dir"
    - Get-ChildItem -Filter '*.debug' -Recurse | Remove-Item -Recurse
    - if ($architecture -eq '64bit') {
    - "   Rename-Item 'lib\\gimp\\2.0\\plug-ins\\twain\\twain,1.exe' 'twain.exe'"
    - "   Remove-Item 'lib\\gimp\\2.0\\plug-ins\\twain\\twain,2.exe'"
    - "   Get-ChildItem -Filter '*,1*' -Recurse | Remove-Item"
    - "   Get-ChildItem -Filter '*,*' -Recurse | Rename-Item -NewName { $_.name -Replace ',\\d','' }"
    - "   New-Item '32\\etc', '32\\share', 'share\\gimp\\2.0\\fonts' -ItemType 'Directory' | Out-Null"
    - "   Copy-Item 'etc\\fonts', 'etc\\gtk-2.0' '32\\etc' -Recurse"
    - "   Copy-Item 'share\\themes' '32\\share' -Recurse"
    - '   $defpath = "`nPATH=`${gimp_installation_dir}\bin;`${gimp_installation_dir}\32\bin"'
    - '} else {'
    - "   Get-ChildItem -Filter '*,1*' -Recurse | Rename-Item -NewName { $_.name -Replace ',1','' }"
    - "   Get-ChildItem -Filter '*,*' -Recurse | Remove-Item"
    - '   movedir "$dir\32" "$dir" | Out-Null'
    - '   $defpath = "`nPATH=`${gimp_installation_dir}\bin"'
    - '}'
    - $defenv = Get-Content 'lib\gimp\2.0\environ\default.env' -Raw
    - $defenv += $defpath
    - $defenv += "PYTHONPATH=`${gimp_installation_dir}\lib\gimp\2.0\python;`${gimp_plug_in_dir}\plug-ins\python-console"
    - $defenv | Set-Content 'lib\gimp\2.0\environ\default.env'
    - $pyenv = Get-Content 'lib\gimp\2.0\environ\pygimp.env' -Raw
    - $pyenv + '__COMPAT_LAYER=HIGHDPIAWARE' | Set-Content 'lib\gimp\2.0\environ\pygimp.env'
    - $pyint = Get-Content 'lib\gimp\2.0\interpreters\pygimp.interp' -Raw
    - $pyint = ($pyint -Replace '/mingw32', "$dir\bin") -Replace 'py::python2', 'py::python'
    - $pyint | Set-Content 'lib\gimp\2.0\interpreters\pygimp.interp'
    - Pop-Location
- post:
    - Remove-Item "$dir\`$PLUGINSDIR" -Recurse
    - Remove-Item "$dir\*.pdb" -Recurse
    - Remove-Item "$dir\pserv4.7z" -Recurse
    - Remove-Item "$dir\*vshost*" -Recurse
    - Remove-Item "$dir\*.exp" -Recurse
- pre: Expand-7zipArchive "$dir\`$PLUGINSDIR\app-64.7z" "$dir"
- installer:
    - Expand-7zipArchive -Path "$dir\$fname" -Removal -Overwrite 'Rename'
    - Rename-Item "$dir\`$0_1" 'HashCheck32.dll' -Force
    - Rename-Item "$dir\`$0" 'HashCheck64.dll' -Force
    - if ($architecture -eq '64bit') {
    - '   sudo "$env:COMSPEC" /c "regsvr32 /s "$dir\HashCheck64.dll""'
    - '}'
    - sudo "$env:COMSPEC" /c "regsvr32 /s "$dir\HashCheck32.dll""
    - Remove-Item "$dir\`$PLUGINSDIR" -Recurse -Force
- pre:
    - Move-Item "$dir\contrib\*" "$dir"
    - Remove-Item "$dir\contrib"
    - foreach ($name in @('irc-keys.dat', 'ntcp2.keys', 'router.info', 'router.keys')) {
    - '    if (!(Test-Path "$persist_dir\$name")) {'
    - '        New-Item -Force -Path "$dir" -Name $name | Out-Null'
    - '    }'
    - '}'
- post:
    - $regpath = "HKCU:\Software\Kymoto Solutions\Inno Script Studio 2\Options\Compiler"
    - New-Item -Path $regpath -Type Directory -Force | Out-Null
    - New-ItemProperty -Path $regpath -Name "InnoCompilerPath" -Value (versiondir 'inno-setup' 'current') | Out-Null
- post: Invoke-WebRequest -Uri 'http://www.jrsoftware.org/download.php/iscrypt.dll' -OutFile "$dir\ISCrypt.dll"
- pre:
    - if (!(Test-Path("$dir/i_view64.ini"))) {
    - '   New-Item "$dir/i_view64.ini" | Out-Null'
    - '}'
    - if (!(Test-Path("$dir/i_view32.ini"))) {
    - '   New-Item "$dir/i_view32.ini" | Out-Null'
    - '}'
- pre:
    - if (!(Test-Path "$persist_dir\kitty.ini")) {
    - '    $kitty = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("W0NvbmZpZ0JveF0NCmhlaWdodD0yMQ0KZmlsdGVyPXllcw0KI2RlZmF1bHQ9eWVzDQojZGVmYXVsdHNldHRpbmdzPXllcw0KI25vZXhpdD1ubw0KI3dpbmRvd2hlaWdodD02MDANCltLaVRUWV0NCmJhY2tncm91bmRpbWFnZT1ubw0KY2Fwc2xvY2s9bm8NCmNvbmY9eWVzDQpjeWd0ZXJtPXllcw0KaWNvbj1ubw0KI2ljb25maWxlPWtpdHR5LmV4ZQ0KI251bWJlcm9maWNvbnM9NDUNCnBhc3RlPW5vDQpwcmludD15ZXMNCnNjcmlwdGZpbGVmaWx0ZXI9QWxsIGZpbGVzICgqLiopfCouKg0Kc2l6ZT1ubw0Kc2hvcnRjdXRzPXllcw0KbW91c2VzaG9ydGN1dHM9eWVzDQpoeXBlcmxpbms9bm8NCnRyYW5zcGFyZW5jeT1ubw0KI2NvbmZpZ2Rpcj0NCiNkb3dubG9hZGRpcj0NCiN1cGxvYWRkaXI9DQojcmVtb3RlZGlyPQ0KI1BTQ1BQYXRoPQ0KI1BTQ1BPcHRpb25zPS1zY3AgLXINCiNQbGlua1BhdGg9DQojV2luU0NQUGF0aD0NCiNDdEhlbHBlclBhdGg9DQojYW50aWlkbGU9PSBcazA4XA0KI2FudGlpZGxlZGVsYXk9NjANCiNzc2h2ZXJzaW9uPU9wZW5TU0hfNS41DQojV2luU0NQUHJvdG9jb2w9c2Z0cA0KI2F1dG9zdG9yZXNzaGtleT1ubw0KI1VzZXJQYXNzU1NITm9TYXZlPW5vDQojY3RybHRhYj15ZXMNCiNLaUNsYXNzTmFtZT1QdVRUWQ0KbWF4Ymxpbmtpbmd0aW1lPTUNCiNhdXRvcmVjb25uZWN0PXllcw0KI1JlY29ubmVjdERlbGF5PTUNCiNzY3JpcHRtb2RlPXllcw0KI2FkYj15ZXMNCnNhdmVtb2RlPWRpcg0KI2JjZGVsYXk9MA0KI2NvbW1hbmRkZWxheT0wLjA1DQojaW5pdGRlbGF5PTIuMA0KI2ludGVybmFsZGVsYXk9MTANCnNsaWRlZGVsYXk9MA0Kd2ludGl0bGU9eWVzDQp6bW9kZW09eWVzDQpbUHJpbnRdDQpoZWlnaHQ9MTAwDQptYXhsaW5lPTYwDQptYXhjaGFyPTg1DQpbRm9sZGVyXQ0KW0xhdW5jaGVyXQ0KcmVsb2FkPXllcw0KW1Nob3J0Y3V0c10NCnByaW50PXtTSElGVH17Rjd9DQpwcmludGFsbD17Rjd9"))'
    - '    Set-Content "$dir\kitty.ini" $kitty -Encoding Ascii'
    - '}'
- pre:
    - Rename-Item "$dir\LameXP.exe" "$dir\LameXP-Portable.exe"
    - $ini = "LameXP-Portable.ini"
    - If (!(Test-Path "$persist_dir\$ini")) {
    - '   New-Item "$dir\$ini" | Out-Null'
    - '} Else {'
    - '   $version -match "(\d+).(\d+).(\d+)" | Out-Null'
    - "   $cleanVersion = $Matches[1] + $Matches[2] + '0' + $Matches[3]"
    - "   (Get-Content \"$persist_dir\\$ini\") -replace 'LameXP_\\d+', \"LameXP_$cleanVersion\" | Set-Content \"$persist_dir\\$ini\""
    - '},'
    - $aac = versiondir 'nero-aac' 'current'
    - If (Test-Path "$aac") {
    - '   info "Adding Nero AAC Codec Support"'
    - '   Copy-Item "$aac\win32\*.exe" "$dir"'
    - '}'
  installer:
    - Remove-Item -Recurse -Force "$dir\`$PLUGINSDIR"
    - Remove-Item "$dir\uninstall.exe.nsis"
- {}
- post:
    - $fpcdir = "$dir\fpc\" + ($fname -replace '.*fpc-([\d.]+)-.*', '$1')
    - '& "$fpcdir\bin\x86_64-win64\fpcmkcfg.exe" -d "basepath=$fpcdir" -o "$fpcdir\bin\x86_64-win64\fpc.cfg"'
- post: Write-Host 'You need admin right to run repairer to get ldplayer working'
- installer64: Expand-7zipArchive "$dir\`$PLUGINSDIR/app-64.7z" "$dir"
  installer32: Expand-7zipArchive "$dir\`$PLUGINSDIR/app-32.7z" "$dir"
  post: Remove-Item "$dir\`$PLUGINSDIR", "$dir\Uninstall*" -Force -Recurse
- pre:
    - if (!(Test-Path "$persist_dir\Data\settings")) {
    - '    New-Item "$dir\Data\settings\LibreOfficePortableSettings.ini" -Value "[LibreOfficePortableSettings]`nInvalidPackageWarningShown=$version.0" -Force | Out-Null'
    - '    if (Test-Path "$Env:AppData\LibreOffice") {'
    - "        Write-Host -F yellow \"Copying old '$Env:AppData\\LibreOffice' to '$persist_dir\\Data\\settings'\""
    - '        Get-Item "$Env:AppData\LibreOffice\*\*" | Copy-Item -Destination "$dir\Data\settings" -Recurse -Force'
    - '    }'
    - '    else { Copy-Item "$dir\App\DefaultData\*" "$dir\Data" -Recurse -Force }'
    - '}'
    - Remove-Item "$dir\`$PLUGINSDIR" -Recurse -Force
- installer:
    - $pcdir = "$(current_dir $dir)\lib\pkgconfig"
    - ''
    - '# future sessions'
    - $null, $currpath = strip_path (env 'PKG_CONFIG_PATH' $global) $pcdir
    - env 'PKG_CONFIG_PATH' $global "$pcdir;$currpath"
    - ''
    - '# this session'
    - $null, $env:PKG_CONFIG_PATH = strip_path $env:PKG_CONFIG_PATH $pcdir
    - $env:PKG_CONFIG_PATH = "$pcdir;$env:PKG_CONFIG_PATH"
- {}
- pre:
    - '#Create placeholder file'
    - function CreateFile([String] $file, [String] $content = $null) {
    - '    if(!(Test-Path "$persist_dir\$file")) {'
    - '        Write-Host "Create placeholder for $file"'
    - '        New-Item -Force -Path "$persist_dir\$file" -ItemType file -Value $content | Out-Null'
    - '    }'
    - '}'
    - CreateFile 'Configuration.dat' '{}'
- pre: Set-Content "$dir/listenMoeSettings.ini" -value $null
- pre:
    - if(!(Test-Path "$persist_dir\LEConfig.xml")) {
    - "    New-Item -Force -Path \"$persist_dir\\LEConfig.xml\" -ItemType File -Value '' | Out-Null"
    - '}'
  post: Write-Host 'Please run Locale Emulator Installer to complete installation.'
- pre64: rename-item "$dir\LockHunter,1.exe" "$dir\lockhunter.exe"
  pre32: rename-item "$dir\LockHunter,2.exe" "$dir\lockhunter.exe"
  post: remove-item "$dir\LockHunter*,*.exe"
- pre:
    - (Get-Content $dir\install.bat) | Foreach-Object {$_ -replace "@pause >nul",""} | Out-File -Encoding oem $dir\install.bat
    - (Get-Content $dir\uninstall.bat) | Foreach-Object {$_ -replace "@pause >nul",""} | Out-File -Encoding oem $dir\uninstall.bat
  installer: sudo "$dir\install.bat"
- pre:
    - $file = 'memreduct.ini'
    - if (-not (Test-Path "$persist_dir\$file")) {
    - "    Write-Host 'File' $file 'does not exists. Creating.' -f Yellow"
    - "    $CONT = @('[memreduct]', 'CheckUpdates=false')"
    - '    Set-Content "$dir\$file" ($CONT -join "`r`n") -Encoding Ascii'
    - '}'
- pre: ForEach ($emptyFile in $manifest.persist) {New-Item "$dir\$emptyFile" -ItemType file -ErrorAction SilentlyContinue | Out-Null}
- pre:
    - if (!(Test-Path "$dir\mp3tag.cfg")) {
    - '   New-Item -ItemType File "$dir\mp3tag.cfg" | Out-Null'
    - '}'
  post:
    - Remove-Item "$dir\`$PLUGINSDIR" -Recurse
    - Remove-Item "$dir\`$R0"
    - Remove-Item "$dir\Mp3tagUninstall.exe.nsis"
- pre:
    - $fold = (Get-ChildItem "$dir" 'MPC-BE*' | Select-Object -First 1).FullName
    - Move-Item "$fold\*" "$dir"
    - Remove-Item "$fold" -Force -Recurse
- pre:
    - Expand-7zipArchive "$dir\MSIAfterburnerSetup*.exe" "$dir"
    - Expand-7zipArchive "$dir\Redist\RTSSSetup.exe" "$dir\RTSS"
    - Get-ChildItem $dir -Recurse -Include @('MSIAfterburnerSetup*.exe', '$PLUGINSDIR', 'Uninstall.exe.nsis', '$R0') | Remove-Item -Recurse
    - Move-Item $dir/RTSS/RTSSHooks.dll.copy $dir/RTSS/RTSSHooks.dll
    - Move-Item $dir/RTSS/RTSSHooks64.dll.copy $dir/RTSS/RTSSHooks64.dll
- pre: Get-ChildItem "$dir\bin\MuseScore?.exe" | Rename-Item -NewName "$dir\bin\MuseScore.exe"
- installer: Get-ChildItem "$dir" 'MusicBeePortable*.exe' | Select-Object -First 1 -ExpandProperty Fullname | Expand-7zipArchive -DestinationPath "$dir" -Removal
- pre: 7z.exe x "$dir\nirlauncher.enc" -o"$dir" -pnirsoft9876$ -y | Out-Null
- pre: Get-ChildItem "$dir\nodec-*.exe" | Rename-Item -NewName "$dir\nodec.exe"
  post:
    - Remove-Item "$dir\Notepad3_${version}_x*.zip"
    - if (Test-Path("$dir\replace-windows-notepad.reg")) {
    - "    $notepad3 = \"$dir\\Notepad3.exe\" -Replace '\\\\', '\\\\'"
    - '    $content = Get-Content "$dir\replace-windows-notepad.reg"'
    - "    $content = $content -Replace '\\$notepad3', $notepad3"
    - '    Set-Content "$dir\replace-windows-notepad.reg" $content -Encoding ASCII'
    - '}'
- pre:
    - Add-Content "$dir/config.xml" $null
    - Add-Content "$dir/session.xml" $null
    - Add-Content "$dir/userDefineLang.xml" $null
- post:
    - "# OpenSCAD can't be started from a symlinked directory. See: https://github.com/openscad/openscad/issues/1309"
    - startmenu_shortcut "$original_dir/openscad.exe" 'OpenSCAD'
    - shim "$original_dir\openscad.exe" $false 'openscad'
- post:
    - "# OpenSCAD can't be started from a symlinked directory. See: https://github.com/openscad/openscad/issues/1309"
    - startmenu_shortcut "$original_dir\openscad.exe" 'OpenSCAD Snapshot'
    - shim "$original_dir\openscad.exe" $false 'openscad-dev'
- {}
- {}
- {}
- installer:
    - Remove-Item -Path "$dir\*_list" -Force
    - Move-Item -Path "$dir\*" -Destination "$dir\$version" -Exclude 'Assets', 'launcher*', 'Resources.pri' -ErrorAction Ignore
    - if (!(Test-Path "$dir\$version\localization")) {
    - '   New-Item -Path "$dir\$version\localization" -ItemType Directory | Out-Null'
    - "   Move-Item -Path \"$dir\\$version\\*.pak\" -Destination \"$dir\\$version\\localization\" -Exclude 'opera*' -ErrorAction Ignore"
    - '}'
    - Set-Content -Path "$dir\installer_prefs.json" -Value (@{ 'autoupdate'= $false; 'enable_stats' = $false; 'single_profile' = $true } | ConvertTo-Json) -Encoding ASCII
- post:
    - Remove-Item "$dir\*.cab" -Force
- {}
- {}
- pre:
    - Expand-7zipArchive "$dir\paint.net.$version.install.exe" "$dir\tmp" -Removal
    - Set-Content "$dir\PaintDotNet.AppSettings.json" '{}' -Encoding Ascii
  installer64: Expand-MsiArchive "$dir\tmp\PaintDotNet_x64.msi" "$dir"
  installer32: Expand-MsiArchive "$dir\tmp\PaintDotNet_x86.msi" "$dir"
  post:
    - Remove-Item "$dir\tmp", "$dir\Paint*.msi" -Recurse -Force
    - $config = [xml](Get-Content "$dir\PaintDotNet.exe.config")
    - $elem = $config.CreateElement('add')
    - $elem.SetAttribute('key', 'PaintDotNet.EnablePortableMode')
    - $elem.SetAttribute('value', 'true')
    - '[void]$config.configuration.appSettings.appendChild($elem)'
    - $config.Save("$dir\PaintDotNet.exe.config")
- {}
- {}
- post: (Get-Content "$dir\Palemoon-Portable.ini") -replace 'ShowSplash=true','ShowSplash=false' | Set-Content "$dir\Palemoon-Portable.ini"
- pre:
    - '   #Create placeholder files'
    - function CreateFile([String] $file, [String] $content = $null) {
    - '    if(!(Test-Path "$persist_dir\$file")) {'
    - '        Write-Host "Create placeholder for peerblock: $file"'
    - '        New-Item -Force -Path "$persist_dir\$file" -ItemType file -Value $content | Out-Null'
    - '    }'
    - '}'
    - CreateFile 'cache.p2b'
    - CreateFile 'peerblock.conf'
    - CreateFile 'peerblock.conf.bak'
    - CreateFile 'peerblock.conf.failed'
  installer64:
    - Rename-Item "$dir\pbfilter,4.sys" "$dir\pbfilter.sys"
    - Remove-Item "$dir\pbfilter,*.sys"
    - Rename-Item "$dir\peerblock,4.exe" "$dir\peerblock.exe"
    - Remove-Item "$dir\peerblock,*.exe"
  installer32:
    - Rename-Item "$dir\pbfilter,3.sys" "$dir\pbfilter.sys"
    - Remove-Item "$dir\pbfilter,*.sys"
    - Rename-Item "$dir\peerblock,3.exe" "$dir\peerblock.exe"
    - Remove-Item "$dir\peerblock,*.exe"
- {}
- {}
- post:
    - $phpconfd = "$persist_dir\..\php-nts\cli\conf.d"
    - $ini = "zend_extension=$dir\php_xdebug.dll`n[xdebug]`nxdebug.remote_enable=on`nxdebug.remote_autostart=on`nxdebug.remote_connect_back=on"
    - if(!(test-path $phpconfd\xdebug.ini)) {
    - '    Write-Output "Enabling extension $(Convert-Path $phpconfd)\xdebug.ini"'
    - '    Add-Content -Value $ini -Path "$phpconfd\xdebug.ini"'
    - '} else {'
    - '    Write-Host -f Yellow "PHP was not installed through scoop, you have to activate php_xdebug.dll manually! Add the following:`n"'
    - '    Write-Host -f Cyan "$ini`n`n"'
    - '}'
- post:
    - $phpconfd = "$persist_dir\..\php\cli\conf.d"
    - $ini = "zend_extension=$dir\php_xdebug.dll`n[xdebug]`nxdebug.remote_enable=on`nxdebug.remote_autostart=on`nxdebug.remote_connect_back=on"
    - if(!(test-path $phpconfd\xdebug.ini)) {
    - '    Write-Output "Enabling extension $(Convert-Path $phpconfd)\xdebug.ini"'
    - '    Add-Content -Value $ini -Path "$phpconfd\xdebug.ini"'
    - '} else {'
    - '    Write-Host -f Yellow "PHP was not installed through scoop, you have to activate php_xdebug.dll manually! Add the following:`n"'
    - '    Write-Host -f Cyan "$ini`n`n"'
    - '}'
- pre:
    - if (!(Test-Path "$dir\config.json")) {
    - '    New-Item -Force -Path "$dir" -Name ''config.json'' -Value ''{}'' | Out-Null'
    - '}'
- installer:
    - $extracted = "$dir\extracted"
    - $msi = "$dir\msi"
    - Expand-DarkArchive "$dir\$fname" "$extracted"
    - Expand-MsiArchive "$extracted\AttachedContainer\PMP.msi" "$msi"
    - Move-Item "$msi\Msi\*" "$dir" -Force
    - Remove-Item $extracted, $msi, "$dir\$fname" -Force -Recurse
- post: Remove-Item "$dir\`$PLUGINSDIR" -Force -Recurse
- post: Remove-Item "$dir\`$PLUGINSDIR", "$dir\uninst.exe" -Force -Recurse
- pre:
    - "@('Rainmeter.ini', 'Rainmeter.data', 'Rainmeter.stats') | ForEach-Object {"
    - '    if(!(Test-Path "$persist_dir\$_")) { New-Item "$dir\$_" -Type File | Out-Null }'
    - '}'
  installer64: Expand-7zipArchive -Overwrite All "$dir\$fname" -Removal
  installer32: Expand-7zipArchive -Overwrite Skip "$dir\$fname" -Removal
  post:
    - '    # Makes default welcome skins appear on new installation.'
    - if(!(Get-Content "$dir\Rainmeter.ini")) {
    - "    @('Layouts\\illustro default\\Rainmeter.ini', 'Skins', 'Layouts') | ForEach-Object {"
    - '        Copy-Item "$dir\Defaults\$_" "$persist_dir" -Force -Recurse | Out-Null'
    - '    }'
    - '}'
    - '    # If there was an update for plugin, copy default plugins after persisting.'
    - if (Test-Path "$dir\Plugins.original") {
    - '    Copy-Item "$dir\Plugins.original\*" "$persist_dir\Plugins" -Force -Recurse'
    - '    Remove-Item "$dir\Plugins.original" -Force -Recurse | Out-Null'
    - '}'
    - "@('$PLUGINSDIR', 'uninst.exe.nsis') | ForEach-Object { Remove-Item \"$dir\\$_\" -Force -Recurse }"
- pre:
    - if(!(Test-Path("$dir\retroarch.cfg"))) {
    - New-Item "$dir\retroarch.cfg" -type file | Out-Null
    - '}'
- pre:
    - Expand-7zipArchive "$dir\riot-web-*-full.nupkg" "$dir\temp" -Removal
    - Move-Item "$dir\temp\lib\net45\*" "$dir" -Force
    - "@('temp', 'background.gif', 'RELEASES', 'Update.exe') | ForEach-Object { Remove-Item \"$dir\\$_\" -Recurse }"
    - cmd /c mklink /J "$env:APPDATA\riot" "$persist_dir\data"
- installer:
    - Expand-7zipArchive "$dir\UTILIT~1.EXE" -ExtractDir 'UtilitySpotlight' -Removal
    - Expand-MsiArchive "$dir\Setup.msi" -Removal
    - Remove-Item "$dir\setup.exe", "$dir\*Folder", "$dir\Documents" -Recurse -Force
- post:
    - "@('etc\\fstab.d', 'dev\\shm', 'dev\\mqueue', 'home\\sage') | ForEach-Object {"
    - '    New-Item "$dir\runtime\$_" -Force -Type Directory | Out-Null'
    - '}'
    - Get-Content "$dir\runtime\etc\symlinks.lst" | ForEach-Object {
    - '    $f = Get-Item $_'
    - "    $f.Attributes = 'System'"
    - '}'
- installer:
    - '# organize files'
    - mkdir -f "$dir\lib\pkgconfig" > $null
    - mkdir -f "$dir\include\SDL2" > $null
    - '# make arch consistent with scoop naming'
    - mv "$dir\SDL2-$version\lib\x86" "$dir\SDL2-$version\lib\32bit"
    - mv "$dir\SDL2-$version\lib\x64" "$dir\SDL2-$version\lib\64bit"
    - '# only install the requested architecture'
    - mv "$dir\SDL2-$version\lib\$architecture\*" "$dir\lib"
    - ''
    - $srcdir = "$dir\SDL2-$version\"
    - mv "$srcdir\include\*.h"  "$dir\include\SDL2"
    - rm "$dir\include\*.h.*"
    - $pcin = "$srcdir\sdl2.pc.in"
    - $pcout = "$dir\lib\pkgconfig\sdl2.pc"
    - sc $pcout ((gc $pcin) `
    - '    -replace "@prefix@","" `'
    - '    -replace "@exec_prefix@","`${prefix}" `'
    - '    -replace "@libdir@","`${exec_prefix}/lib" `'
    - '    -replace "@includedir@","`${prefix}/include" `'
    - '    -replace "@SDL_VERSION@","$version" `'
    - '    -replace "@SDL_RLD_FLAGS@","" `'
    - '    -replace "@SDL_LIBS@","-lSDL2" `'
    - '    -replace "@SDL_STATIC_LIBS@","-lSDL2" `'
    - '    -replace "@SDL_CFLAGS@","-lpthread -lasound" `'
    - )
    - ''
    - rm -r "$srcdir"
    - ''
    - $pcdir = "$(current_dir $dir)\lib\pkgconfig"
    - $cmdir = "$(current_dir $dir)"
    - '# future sessions'
    - $null, $currpath = strip_path (env 'PKG_CONFIG_PATH' $global) $pcdir
    - env 'PKG_CONFIG_PATH' $global "$pcdir;$currpath"
    - $null, $currpath = strip_path (env 'CMAKE_PREFIX_PATH' $global) $cmddir
    - env 'CMAKE_PREFIX_PATH' $global "$cmddir;$currpath"
    - '# this session'
    - $null, $env:PKG_CONFIG_PATH = strip_path $env:PKG_CONFIG_PATH $pcdir
    - $env:PKG_CONFIG_PATH = "$pcdir;$env:PKG_CONFIG_PATH"
    - $null, $env:CMAKE_PREFIX_PATH = strip_path $env:CMAKE_PREFIX_PATH $cmdir
    - $env:CMAKE_PREFIX_PATH = "$cmdir;$env:CMAKE_PREFIX_PATH"
- pre:
    - function CreateFile ($name, $value = $null) {
    - '    if (!(Test-Path "$persist_dir\$name")) {'
    - '        Write-Host -ForegroundColor Yellow -BackgroundColor Black "Create $name for shadowsocks"'
    - '        New-Item -Force -Path "$persist_dir" -Name $name -Value $value'
    - '    }'
    - '}'
    - "'gui-config.json', 'statistics-config.json' | % {CreateFile $_ '{}'}"
    - "'pac.txt', 'user-rule.txt' | % {CreateFile $_}"
- pre:
    - '   #Create placeholder files'
    - function CreateFile([String] $file, [String] $content = $null) {
    - '    if(!(Test-Path "$persist_dir\$file")) {'
    - '        Write-Host "Create placeholder for shadowsocksr-csharp: $file"'
    - '        New-Item -Force -Path "$persist_dir\$file" -ItemType file -Value $content | Out-Null'
    - '    }'
    - '}'
    - CreateFile 'gui-config.json' '{}'
    - CreateFile 'pac.txt'
    - CreateFile 'transfer_log.json' '{}'
    - CreateFile 'user-rule.txt'
- pre: ForEach ($emptyFile in $manifest.persist) {New-Item "$dir\$emptyFile" -ItemType file -ErrorAction SilentlyContinue | Out-Null}
- post:
    - echo =============
    - echo ''
    - $agentpath=bash -c "wslpath -a '$dir/ssh-agent-wsl'"
    - 'echo "Add this to your ~/.bashrc inside WSL: eval `$($agentpath -r)"'
    - echo ''
    - echo =============
- pre:
    - '"#!`"$dir\Python\python.exe`"" | Set-Content "$dir\bin\python.txt"'
    - '"#!`"$dir\Python\pythonw.exe`"" | Set-Content "$dir\bin\pythonw.txt"'
    - if((Get-Command Get-Content).parameters.ContainsKey('AsByteStream')) {
    - '   Get-Content -AsByteStream "$dir\bin\launcher_exe.dat","$dir\bin\python.txt","$dir\bin\streamlink-append.zip" | Set-Content -AsByteStream "$dir\bin\streamlink.exe"'
    - '   Get-Content -AsByteStream "$dir\bin\launcher_noconsole_exe.dat","$dir\bin\pythonw.txt","$dir\bin\streamlinkw-append-noconsole.zip" | Set-Content -AsByteStream "$dir\bin\streamlinkw.exe"'
    - '} else {'
    - '   Get-Content -Encoding byte "$dir\bin\launcher_exe.dat","$dir\bin\python.txt","$dir\bin\streamlink-append.zip" | Set-Content -Encoding byte "$dir\bin\streamlink.exe"'
    - '   Get-Content -Encoding byte "$dir\bin\launcher_noconsole_exe.dat","$dir\bin\pythonw.txt","$dir\bin\streamlinkw-append-noconsole.zip" | Set-Content -Encoding byte "$dir\bin\streamlinkw.exe"'
    - '}'
  post:
    - If(!(Test-Path "$env:APPDATA\streamlink\streamlinkrc")) {
    - "    Write-Host \"Copying default 'streamlinkrc' to '%APPDATA%\\streamlink\\streamlinkrc'\""
    - '    New-Item -Force -Type directory -Path "$env:APPDATA\streamlink" | Out-Null'
    - '    Copy-Item "$dir\`$APPDATA\streamlink\streamlinkrc" "$env:APPDATA\streamlink\streamlinkrc"'
    - '}'
    - Remove-Item "$dir\`$PLUGINSDIR" -Recurse
    - Remove-Item "$dir\ffmpeg" -Recurse
    - Remove-Item "$dir\uninstall.exe"
- pre:
    - $file = 'SumatraPDF-settings.txt'
    - if (-not (Test-Path "$persist_dir\$file")) {
    - "    Write-Host 'File' $file 'does not exists. Creating.' -f Yellow"
    - "    $CONT = @('CheckForUpdates = false')"
    - '    Set-Content "$dir\$file" ($CONT -join "`r`n") -Encoding Ascii'
    - '}'
- installer:
    - foreach ($file in @('texmaker.ini', 'texmakerapp.ini')){
    - '    if(!(Test-Path "$persist_dir\$file")) {'
    - '        New-Item "$persist_dir\$file" -Force | Out-Null'
    - '    }'
    - '    Copy-Item "$persist_dir\$file" "$dir\$file" -Force'
    - '}'
- pre:
    - Expand-7zipArchive "$dir\$fname" "$dir\_tmp"
    - Expand-7zipArchive "$dir\_tmp\INSTALL.CAB" "$dir" -Removal
    - Move-Item "$dir\e\*" "$dir"
    - Remove-Item -Recurse "$dir\d", "$dir\e", "$dir\_tmp", "$dir\$fname"
    - '"[Configuration]`r`nUseIniInProgramDir=7" | Out-File -Encoding ASCII "$dir\wincmd.ini"'
    - ForEach ($emptyFile in $manifest.persist) {New-Item "$dir\$emptyFile" -ItemType file -ErrorAction SilentlyContinue | Out-Null}
